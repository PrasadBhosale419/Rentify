using AutoMapper;
using Backend.Data;
using Backend.Dtos;
using Backend.Interfaces;
using Backend.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Backend.Controllers
{
    [Authorize]
    public class CityController : BaseController
    {
        public CityController(IUnitOfWork uow, IMapper mapper)
        {
            Uow = uow;
            Mapper = mapper;
        }
        private readonly IUnitOfWork Uow;

        private readonly IMapper Mapper;

        [HttpGet()]
        [AllowAnonymous]
        public async Task<IActionResult> GetCities()
        {
            var cities = await Uow.cityRepository.GetAllCitiesAsync();
            var citiesDTO = Mapper.Map<IEnumerable<CityDTO>>(cities);
            return Ok(citiesDTO);
        }

        [HttpDelete("delete/{id}")]
        public async Task<IActionResult> DeleteCities(int id)
        {
            // Ensure the ID exists and the city is removed correctly
            Uow.cityRepository.RemoveCity(id);
            await Uow.SaveAsync();
            return Ok();
        }

        [HttpPost("post")]
        public async Task<IActionResult> AddCities(CityDTO cityd)
        {
            // Ensure the ID is not being set manually (it should be auto-generated by the database)
            var city = new City()
            {
                name = cityd.name,
                Country = cityd.Country,
                LastUpdatedBy = 1,
                LastUpdatedOn = DateTime.Now
            };
            Uow.cityRepository.AddCity(city);
            bool saved = await Uow.SaveAsync();
            if (saved)
            {
                return StatusCode(201);
            }
            return BadRequest("Error saving the city.");
        }

        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateCities(int id, CityDTO cityDTO)
        {
            try
            {
                // Ensure the ID exists and the city is removed correctly
                if (id != cityDTO.id)
                {
                    return BadRequest("Update Not Allowed");
                }

                var cityFromDb = await Uow.cityRepository.FindCity(id);
                if (cityFromDb == null)
                {
                    return BadRequest("Update Not Allowed");
                }
                cityFromDb.LastUpdatedBy = 1;
                cityFromDb.LastUpdatedOn = DateTime.Now;
                Mapper.Map(cityDTO, cityFromDb);
                await Uow.SaveAsync();
                return StatusCode(200);
            }
            catch (Exception ex) { 
                return StatusCode(500, "Some unknown error occured");
            }
        }

        [HttpPut("updateCityName/{id}")]
        public async Task<IActionResult> UpdateCitiesPatch(int id, CityUpdateDTO cityUpdatedDTO)
        {
            // Ensure the ID exists and the city is removed correctly
            var cityFromDb = await Uow.cityRepository.FindCity(id);
            cityFromDb.LastUpdatedBy = 1;
            cityFromDb.LastUpdatedOn = DateTime.Now;
            Mapper.Map(cityUpdatedDTO, cityFromDb);
            await Uow.SaveAsync();
            return StatusCode(200);
        }

        [HttpPatch("update/{id}")]
        public async Task<IActionResult> UpdateCitiesPatch(int id, JsonPatchDocument<City> cityToPatch)
        {
            // Ensure the ID exists and the city is removed correctly
            var cityFromDb = await Uow.cityRepository.FindCity(id);
            cityFromDb.LastUpdatedBy = 1;
            cityFromDb.LastUpdatedOn = DateTime.Now;
            cityToPatch.ApplyTo(cityFromDb, ModelState);
            await Uow.SaveAsync();
            return StatusCode(200);
        }
    }
}
